from Funcs import *
from FOD import *
from ElementaryClasses import *
from globaldata import *
from BFOD import BFOD

class FFOD(FOD):
    def __init__(self, atom: Atom):
        super().__init__()
        self.mPos = np.zeros(3)
        self.mAtom = atom
        self.mR = -1.0
        self.mFreeDir = atom.AverageBFODDir()/3
    
class SFFOD(FFOD):
    def __init__(self, atom: Atom):
        super().__init__(atom)
        self.DetermineParameters()

    def DetermineParameters(self) -> None:
        """
        This function determines the distance away from parent atom of the SFFOD. 
        """
        # Leave average of bonding atoms.
        if len(self.mAtom.mBonds) == 3 :
            dr = self.mFreeDir

        #Perhaps add a restriction here later
        elif len(self.mAtom.mBonds) == 2 :
            dr = normalize(self.mFreeDir)*self.mAtom.GetMonoCovalRad()
        
        # The following section has 2 options. In atoms with just a 1s core shell 
        # tend to be closer to the nucleus when their valence is complete.
        elif len(self.mAtom.mBonds) == 1:
            if (self.mAtom.mPeriod < 3):
                dr = normalize(self.mFreeDir)*self.mAtom.GetMonoCovalEdge()/sqrt(8)  #Place at midsphere distance?
            else:
                dr = self.mFreeDir
        # Set position
        self.mPos = self.mAtom.mPos + dr

    ### Measurement ###
    # Description: This is after associating an FOD point from an optimized output to a "predicted" 
    # FOD (generated by this program). 
    def MeasureR(self) -> float:
        return np.linalg.norm(self.mPos - self.mAtom.mPos)

class DFFOD(FFOD):
    def __init__(self, atom: Atom):
        super.__init__(atom)

    def DetermineParameters():
        pass

class TFFOD(FFOD):
    def __init__(self, atom: Atom, heightdir: np.ndarray):
        super.__init__(atom)
        self.mHeight = heightdir
        self.mAngle = 0.0
        self.DetermineParameters()

    def DetermineParameters(self):
        # Determine FreeDir projection
        if self.mAtom.mPeriod < 3:
            elecs = GlobalData.GetFullElecCount(self.mGroup, self.mPeriod)
            dFD = normalize(self.mFreeDir)*g
        else:
            pass
        # Determine Height
        # Finalize Position
        # Measure angle
        self.mAngle = AngleBetween(self.mFreeDir,self.mPos-self.mAtom)